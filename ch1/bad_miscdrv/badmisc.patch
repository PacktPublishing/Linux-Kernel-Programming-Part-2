--- ../miscdrv_rdwr/miscdrv_rdwr.c	2020-11-04 16:26:40.446937016 +0530
+++ bad_miscdrv.c	2020-11-04 19:29:50.436546682 +0530
@@ -1,5 +1,5 @@
 /*
- * ch1/miscdrv_rdwr/miscdrv_rdwr.c
+ * ch1/bad_miscdrv_rdwr/bad_miscdrv_rdwr.c
  ***************************************************************
  * This program is part of the source code released for the book
  *  "Linux Kernel Programming (Part 2)"
@@ -11,17 +11,23 @@
  * From: Ch 1 : Writing a Simple Misc Character Device Driver
  ****************************************************************
  * Brief Description:
- * This driver is built upon our previous 'skeleton' ../miscdrv/ misc
- * framework driver. The key difference: we use a few global data items within
- * a driver 'private' data structure throughout.
- * On init, we allocate memory to it and initialize it; one of the members
- * within is a so-called secret (the 'oursecret' member along with some fake
- * statistics and config words).
- * Importantly here, we perform (basic) I/O - reading and writing:
- * when a userpace process (or thread) opens our device file and issues a
- * read(2) upon it, we pass back the 'secret' data string to it.
- * When a user mode process writes data to us, we consider that data to be the
- * new 'secret' string and update it here (in driver memory).
+ * This driver is built upon our previous ../miscdrv_rdwr/ misc driver.
+ * The key difference: we deliberately insert buggy code - selectable
+ * via defines in the source below - that make the read and/or write methods
+ * buggy.
+ * The read bug merely results in a 'bad' read reported by the kernel; the
+ * write bug, when enabled, is in fact *a dangerous for security* one: it modifies
+ * the current process context's task structure's 'cred->uid' member to zero,
+ * thus making the process gain root access - in effect, a 'privesc'
+ * (privilege escalation)!
+ *
+ * Do note: this security 'hack' is a very deliberately contrived and not a
+ * particularly clever one; we certainly do not expect driver authors to do
+ * stuff like this - writing into the process task structure! Really, the
+ * reason it's demonstrated here is to show precisely why thinking about
+ * security and avoiding sloppy coding practices is crucial.
+ * Also, it *only* works if the device file permissions allow a write for
+ * public non-root users!
  *
  * For details, please refer the book, Ch 1.
  */
@@ -30,8 +36,8 @@
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/miscdevice.h>
-#include <linux/slab.h>		// k[m|z]alloc(), k[z]free(), ...
-#include <linux/mm.h>		// kvmalloc()
+#include <linux/slab.h>         // k[m|z]alloc(), k[z]free(), ...
+#include <linux/mm.h>           // kvmalloc()
 #include <linux/fs.h>		// the fops
 
 // copy_[to|from]_user()
@@ -42,16 +48,26 @@
 #include <asm/uaccess.h>
 #endif
 
+#include <linux/cred.h>
 #include "../../convenient.h"
 
-#define OURMODNAME   "miscdrv_rdwr"
+#define OURMODNAME   "bad_miscdrv" //_rdwr"
 MODULE_AUTHOR("Kaiwan N Billimoria");
-MODULE_DESCRIPTION("LKP-2 book:ch2/miscdrv_rdwr: simple misc char driver with"
-" a 'secret' to read/write");
+MODULE_DESCRIPTION("LKP-2 book:ch1/bad_miscdrv_rdwr: simple misc char driver"
+" with a 'secret' to read/write AND a (contrived) privesc!");
 MODULE_LICENSE("Dual MIT/GPL");
 MODULE_VERSION("0.1");
 
-static int ga, gb = 1;		/* ignore for now ... */
+/* Portability: set the printk formatting appropriately for 32 and 64-bit */
+#if (BITS_PER_LONG == 64)
+	#define ADDRFMT   "0x%llx"
+	#define TYPECST   unsigned long long
+#else
+	#define ADDRFMT   "0x%lx"
+	#define TYPECST   unsigned long
+#endif
+
+static int ga, gb = 1; /* ignore for now ... */
 
 /*
  * The driver 'context' (or private) data structure;
@@ -62,8 +78,8 @@
 	int tx, rx, err, myword;
 	u32 config1, config2;
 	u64 config3;
-#define MAXBYTES    128		/* Must match the userspace app; we should actually
-				 * use a common header file for things like this */
+#define MAXBYTES    128   /* Must match the userspace app; we should actually
+			   * use a common header file for things like this */
 	char oursecret[MAXBYTES];
 };
 static struct drv_ctx *ctx;
@@ -95,23 +111,25 @@
  * The driver's read 'method'; it has effectively 'taken over' the read syscall
  * functionality!
  * The POSIX standard requires that the read() and write() system calls return
- * the number of bytes read or written on success, 0 on EOF (for read), and -1
- * (-ve errno) on failure; here, we copy the 'secret' from our driver context
- * structure to the userspace app.
+ * the number of bytes read or written on success, 0 on EOF and -1 (-ve errno)
+ * on failure; here, we copy the 'secret' from our driver context structure
+ * to the userspace app.
  */
 static ssize_t read_miscdrv_rdwr(struct file *filp, char __user *ubuf,
-				 size_t count, loff_t *off)
+				size_t count, loff_t *off)
 {
-	int ret = count, secret_len = strnlen(ctx->oursecret, MAXBYTES);
+	int ret = count, secret_len = strlen(ctx->oursecret);
 	struct device *dev = ctx->dev;
+	void *kbuf = NULL;
+	void *new_dest = NULL;
 
 	PRINT_CTX();
 	dev_info(dev, "%s wants to read (upto) %zd bytes\n", current->comm, count);
 
 	ret = -EINVAL;
 	if (count < MAXBYTES) {
-		dev_warn(dev, "request # of bytes (%zu) is < required size"
-			" (%d), aborting read\n", count, MAXBYTES);
+		dev_warn(dev, "request # of bytes (%zu) is < required size (%d), aborting read\n",
+			count, MAXBYTES);
 		goto out_notok;
 	}
 	if (secret_len <= 0) {
@@ -120,29 +138,53 @@
 		goto out_notok;
 	}
 
-	/* In a 'real' driver, we would now actually read the content of the
+	ret = -ENOMEM;
+	kbuf = kvmalloc(count, GFP_KERNEL);
+	if (unlikely(!kbuf))
+		goto out_nomem;
+
+	/*
+	 * In a 'real' driver, we would now actually read the content of the
 	 * device hardware (or whatever) into the user supplied buffer 'ubuf'
 	 * for 'count' bytes, and then copy it to the userspace process (via
 	 * the copy_to_user() routine).
 	 * (FYI, the copy_to_user() routine is the *right* way to copy data from
 	 * userspace to kernel-space; the parameters are:
-	 *  'to-buffer' (dest), 'from-buffer' (src), count (# of bytes)
-	 * Returns 0 on success, i.e., non-zero return implies an I/O fault).
+	 *  'to-buffer', 'from-buffer', count
+	 *  Returns 0 on success, i.e., non-zero return implies an I/O fault).
 	 * Here, we simply copy the content of our context structure's 'secret'
 	 * member to userspace.
 	 */
+
+#define READ_BUG
+//#undef READ_BUG
+#ifdef READ_BUG
+	/*
+	 * As a demo of misusing the copy_to_user(), we change the destination
+	 * pointer to point 512 KB *beyond* the userspace buffer; this will/could
+	 * result in a bad read
+	 */
+	new_dest = ubuf+(512*1024);
+#else
+	new_dest = ubuf;
+#endif
 	ret = -EFAULT;
-	if (copy_to_user(ubuf, ctx->oursecret, secret_len)) {
+	dev_info(dev, "dest addr = " ADDRFMT "\n", (TYPECST)new_dest);
+
+	if (copy_to_user(new_dest, ctx->oursecret, secret_len)) {
 		dev_warn(dev, "copy_to_user() failed\n");
-		goto out_notok;
+		goto out_ctu;
 	}
 	ret = secret_len;
 
 	// Update stats
-	ctx->tx += secret_len;	// our 'transmit' is wrt this driver
+	ctx->tx += secret_len; // our 'transmit' is wrt this driver
 	dev_info(dev, " %d bytes read, returning... (stats: tx=%d, rx=%d)\n",
-		secret_len, ctx->tx, ctx->rx);
- out_notok:
+			secret_len, ctx->tx, ctx->rx);
+out_ctu:
+	kvfree(kbuf);
+out_nomem:
+out_notok:
 	return ret;
 }
 
@@ -151,20 +193,21 @@
  * The driver's write 'method'; it has effectively 'taken over' the write syscall
  * functionality!
  * The POSIX standard requires that the read() and write() system calls return
- * the number of bytes read or written on success, 0 on EOF (for read), and -1
- * (-ve errno) on failure; here, we copy the 'secret' from our driver context
- * structure to the userspace app.
+ * the number of bytes read or written on success, 0 on EOF and -1 (-ve errno)
+ * on failure; Here, we accept the string passed to us and update our 'secret'
+ * value to it.
  */
 static ssize_t write_miscdrv_rdwr(struct file *filp, const char __user *ubuf,
-				  size_t count, loff_t *off)
+				size_t count, loff_t *off)
 {
 	int ret = count;
-	void *kbuf = NULL;
 	struct device *dev = ctx->dev;
+	void *kbuf = NULL;
+	void *new_dest = NULL;
 
 	PRINT_CTX();
-	if (unlikely(count > MAXBYTES)) {	/* paranoia */
-		dev_warn(dev, "count %zd exceeds max # of bytes allowed, "
+	if (unlikely(count > MAXBYTES)) {   /* paranoia */
+		dev_warn(dev, "count %zu exceeds max # of bytes allowed, "
 			"aborting write\n", count);
 		goto out_nomem;
 	}
@@ -176,6 +219,22 @@
 		goto out_nomem;
 	memset(kbuf, 0, count);
 
+#define DANGER_GETROOT_BUG
+//#undef DANGER_GETROOT_BUG
+#ifdef DANGER_GETROOT_BUG
+	/*
+	 * *DANGEROUS BUG*
+	 * Make the destination of the copy_from_user() point to the current
+	 * process context's (real) UID; this way, we redirect the driver to
+	 * write zero's here. Why? Simple: traditionally, a UID == 0 is what
+	 * defines root capability!
+	 */
+	new_dest = &current->cred->uid;
+	dev_info(dev, " [current->cred=" ADDRFMT "]\n", (TYPECST)current->cred);
+#else
+	new_dest = kbuf;
+#endif
+
 	/* Copy in the user supplied buffer 'ubuf' - the data content to write -
 	 * via the copy_from_user() macro.
 	 * (FYI, the copy_from_user() macro is the *right* way to copy data from
@@ -183,8 +242,10 @@
 	 *  'to-buffer', 'from-buffer', count
 	 *  Returns 0 on success, i.e., non-zero return implies an I/O fault).
 	 */
+	dev_info(dev, "dest addr = " ADDRFMT "\n", (TYPECST)new_dest);
+
 	ret = -EFAULT;
-	if (copy_from_user(kbuf, ubuf, count)) {
+	if (copy_from_user(new_dest, ubuf, count)) {
 		dev_warn(dev, "copy_from_user() failed\n");
 		goto out_cfu;
 	}
@@ -198,17 +259,17 @@
 #if 0
 	/* Might be useful to actually see a hex dump of the driver 'context' */
 	print_hex_dump_bytes("ctx ", DUMP_PREFIX_OFFSET,
-			     ctx, sizeof(struct drv_ctx));
+				ctx, sizeof(struct drv_ctx));
 #endif
 	// Update stats
-	ctx->rx += count;	// our 'receive' is wrt this driver
+	ctx->rx += count; // our 'receive' is wrt this driver
 
 	ret = count;
-	dev_info(dev, " %zd bytes written, returning... (stats: tx=%d, rx=%d)\n",
+	dev_info(dev, " %zu bytes written, returning... (stats: tx=%d, rx=%d)\n",
 		count, ctx->tx, ctx->rx);
- out_cfu:
+out_cfu:
 	kvfree(kbuf);
- out_nomem:
+out_nomem:
 	return ret;
 }
 
@@ -222,9 +283,8 @@
 {
 	struct device *dev = ctx->dev;
 
-	PRINT_CTX();		// displays process (or intr) context info
-	ga--;
-	gb++;
+	PRINT_CTX(); // displays process (or intr) context info
+	ga--; gb++;
 	dev_info(dev, " filename: \"%s\"\n", filp->f_path.dentry->d_iname);
 
 	return 0;
@@ -235,40 +295,37 @@
 	.open = open_miscdrv_rdwr,
 	.read = read_miscdrv_rdwr,
 	.write = write_miscdrv_rdwr,
-	.llseek = no_llseek,	// dummy, we don't support lseek(2)
+	.llseek = no_llseek,             // dummy, we don't support lseek(2)
 	.release = close_miscdrv_rdwr,
 	/* As you learn more reg device drivers, you'll realize that the
 	 * ioctl() would be a very useful method here. As an exercise,
 	 * implement an ioctl method; when issued with the 'GETSTATS' 'command',
-	 * it should return the statistics (tx, rx, errors) to the calling app.
-	 * Refer to our online material "User-Kernel Communication Pathways" for
-	 * the details oh how to use the ioctl(), etc.
+	 * it should return the statistics (tx, rx, errors) to the calling app
 	 */
 };
 
 static struct miscdevice llkd_miscdev = {
-	.minor = MISC_DYNAMIC_MINOR,	/* kernel dynamically assigns a free minor# */
-	.name = "llkd_miscdrv_rdwr",	/* when misc_register() is invoked, the kernel
-		 * will auto-create device file as /dev/llkd_miscdrv_rdwr;
-		 *  also populated within /sys/class/misc/ and /sys/devices/virtual/misc/ */
+	.minor = MISC_DYNAMIC_MINOR, // kernel dynamically assigns a free minor#
+	.name = "bad_miscdrv", //_rdwr",
+	    // populated within /sys/class/misc/ and /sys/devices/virtual/misc/
 	.mode = 0666,		/* ... dev node perms set as specified here */
 	.fops = &llkd_misc_fops,	/* connect to this driver's 'functionality' */
 };
 
-static int __init miscdrv_rdwr_init(void)
+static int __init bad_miscdrv_init(void)
 {
-	int ret = 0;
+	int ret;
 
 	ret = misc_register(&llkd_miscdev);
 	if (ret) {
 		pr_notice("misc device registration failed, aborting\n");
 		return ret;
 	}
+	pr_info("LLKD 'bad' misc driver (major # 10) registered, minor# = %d\n",
+		llkd_miscdev.minor);
 
-	pr_info("LLKD misc driver (major # 10) registered, minor# = %d,"
-		" dev node is /dev/llkd_miscdrv_rdwr\n", llkd_miscdev.minor);
-
-	/* A 'managed' kzalloc(): use the 'devres' API devm_kzalloc() for mem
+	/*
+	 * A 'managed' kzalloc(): use the 'devres' API devm_kzalloc() for mem
 	 * alloc; why? as the underlying kernel devres framework will take care of
 	 * freeing the memory automatically upon driver 'detach' or when the driver
 	 * is unloaded from memory
@@ -281,16 +338,16 @@
 	ctx->dev = llkd_miscdev.this_device;
 	/* Initialize the "secret" value :-) */
 	strlcpy(ctx->oursecret, "initmsg", 8);
-	dev_dbg(ctx->dev, "A sample print via the dev_dbg(): driver initialized\n");
+	dev_dbg(ctx->dev, "A sample print via the dev_dbg(): (bad) driver initialized\n");
 
 	return 0;		/* success */
 }
 
-static void __exit miscdrv_rdwr_exit(void)
+static void __exit bad_miscdrv_exit(void)
 {
 	misc_deregister(&llkd_miscdev);
-	pr_info("LLKD misc (rdwr) driver deregistered, bye\n");
+	pr_info("LLKD (bad) misc driver deregistered, bye\n");
 }
 
-module_init(miscdrv_rdwr_init);
-module_exit(miscdrv_rdwr_exit);
+module_init(bad_miscdrv_init);
+module_exit(bad_miscdrv_exit);
